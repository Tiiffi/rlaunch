# vim: syn=python

import os
import SCons.Util
	
Import('env', 'flavor')

def mkmsg_emitter(target, source, env):
	"Produce a list of files generated by the mkmsg.py script"
	newt = [str(target[0]) + '.h', str(target[0]) + '.c']
	for t in newt:
		env.Depends(t, '#src/mkmsg.py')
	return (newt, source)

mkmsg_bld = Builder(
	action = r'python "%s%ssrc%smkmsg.py" ${TARGET.dir}/${SOURCES.filebase} < $SOURCES' % (env['ROOT_DIR'], os.sep, os.sep),
	#action = r'echo ${TARGET} ${SOURCE}',
	src_suffix = '.msg',
	emitter = mkmsg_emitter,
	single_source = 1)

my_env = env.Clone()
my_env.Append(BUILDERS = {'MakeNetMessage': mkmsg_bld})
my_env.Append(CPPPATH = Split('#/' + flavor[0] + '/' + env['PLATFORM']))

if env['PLATFORM'] == 'win32':
	my_env.Append(LIBS = Split('ws2_32 user32 kernel32'))
	if 'release' == flavor[0]:
		my_env.Append(CCFLAGS=Split('/Ox /GF /MT /GS-'))
		my_env.Append(CPPDEFINES=Split('NDEBUG'))
	elif 'debug' == flavor[0]:
		my_env.Append(CCFLAGS=Split('/Od /GS /RTCscu /Z7'))

elif env['PLATFORM'] == 'posix':
	if 'release' == flavor[0]:
		my_env.Append(CCFLAGS=Split('-O2'))
		my_env.Append(CPPDEFINES=Split('NDEBUG'))
	elif 'debug' == flavor[0]:
		my_env.Append(CCFLAGS=Split('-g3'))
else:
	my_env.Append(CPPDEFINES=Split('__AMIGA__ BIG_ENDIAN'))
	if 'release' == flavor[0]:
		my_env.Append(CCFLAGS=Split('-O2'))
		my_env.Append(CPPDEFINES=Split('NDEBUG'))
	elif 'debug' == flavor[0]:
		pass
		# my_env.Append(CCFLAGS=Split('-g')) :-(

common_sources = Split('util.c transport.c peer.c protocol.c socket_includes.c')
common_sources.append([ my_env.MakeNetMessage('rlnet.msg') ][0][1])

def mkprog(env, name, srcs):
	prog_env = env.Clone()
	if 'debug' == flavor[0]:
		prog_env['PDB'] = name + flavor[1] + '.pdb'
	return prog_env.Program(name + flavor[1], srcs)

if env['PLATFORM'] == 'amiga':
	ami_sources = Split('amigafs.c') + common_sources
	# my_env.Append(LIBS = Split('amiga'))
	mkprog(my_env, 'rl-target', Split('target.c') + ami_sources)
	#mkprog(my_env, 'minifs', Split('minifs.c') + ami_sources)
	#mkprog(my_env, 'hello', Split('helloworld.c'))
else:
	common_lib = my_env.Library(common_sources)

	target_sources = Split('target.c') + common_lib
	controller_sources = Split('controller.c file_server.c') + common_lib
	prog_target = mkprog(my_env, 'rl-target', target_sources)
	prog_controller = mkprog(my_env, 'rl-controller', controller_sources)
